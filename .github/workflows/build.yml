name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SOLUTION_FILE_PATH: ./devops
  BUILD_CONFIGURATION: Debug
  SONAR_WRAPPER_URL: https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip
  SONAR_SCANNER_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.0.2311-windows.zip
  # sonar-scanner-cli 대신 sonar-scanner-msbuild 도 사용 고려

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '[,16.8]'
    
    - name: Cache build wrapper
      uses: actions/cache@v2
      with:
        path: .\build-wrapper
        key: ${{ runner.os }}-build-wrapper-cache
        restore-keys: ${{ runner.os }}-build-wrapper-cache

    - name: Cache SonarScanner
      id: cache-sonar-scanner
      uses: actions/cache@v2
      with:
        path: .\sonar-scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarScanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri "${{ env.SONAR_WRAPPER_URL }}" -OutFile build-wrapper.zip
        Invoke-WebRequest -Uri "${{ env.SONAR_SCANNER_URL }}" -OutFile sonar-scanner.zip
        Expand-Archive build-wrapper.zip
        Expand-Archive sonar-scanner.zip

    - name: Build
      shell: pwsh
      run: |
        cd .\build-wrapper\build-wrapper-win-x86
        dir
        .\build-wrapper\build-wrapper-win-x86\buildwrapper-win-x86-64.exe --out-dir bw_output msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: SonarScanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        ./sonar-scanner/sonar-scanner-4.6.0.2311-windows/bin/sonar-scanner.bat -Dsonar.cfamily.build-wrapper-output=./bw_output

        # SET PATH=%PATH%;%cd%\build\sonar-scanner\bin
        # ECHO PATH=%PATH%
        # ECHO DIR %cd%\build\bw_output\
        # DIR %cd%\build\bw_output\
        # ./sonar-scanner.bat -Dsonar.cfamily.build-wrapper-output=%cd%\build\bw_output

      
      # original
      # run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
      # 1. community 글 참조해서 sonar wrapper와 sonar scanner 설치, 추가로 cache활용까지
      # 2. build wrapper와 msbuild를 함께 사용해서 build, msbuild path설정 필요.
      #    build-wrapper-win-x86-64 --out-dir build\bw_output msbuild
      # 3. sonar 빌드 결과물에 sonar scanner 적용

      # dotnet msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      # build-wrapper-win-x86-64.exe --out-dir bw-output MSBuild.exe -p:Configuration=Debug -p:Platform=x64 devops/devops.sln
      # dotnet-sonarscanner -Dsonar.cfamily.build-wrapper-output=bw-output

      # travis보면 wrapper와 같이 빌드를 하는데 이때 shell은 bash이다. 여기서도 shell을 bash로 설정할 수 있고
      # 따라서 wrpper.exe를 설치하기는 귀찮지만(community에 공유한 글이 설치를 하는 것을 보여준다/.)
      # 그냥 wrapper도 git에 넣어서 실행시키면 그냥 돌아갈 듯. 
      # 근데 어짜피 sonar-scanner를 깔아야 하기 때문에 겸사겸사 둘다 깔면 좋지...
      # 먼저 token설정이 필요하다.
